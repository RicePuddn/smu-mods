/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Monitor.glb -t 
*/

import { useGLTF } from "@react-three/drei";
import type * as THREE from "three";
import type { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    monitor_stand001: THREE.Mesh;
    Cube006: THREE.Mesh;
    Cube006_1: THREE.Mesh;
    Cube002: THREE.Mesh;
    Cube002_1: THREE.Mesh;
    monitor_stand: THREE.Mesh;
  };
  materials: {
    monitor: THREE.MeshStandardMaterial;
    ["monitor.001"]: THREE.MeshStandardMaterial;
  };
  animations: THREE.AnimationClip[];
};

export function Monitor(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/room/Monitor.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.monitor_stand001.geometry}
        material={materials.monitor}
        position={[-2.313, 1.217, -2.496]}
        rotation={[0, 0.802, 0]}
        scale={[0.437, 0.017, 0.152]}
      />
      <group position={[-1.261, 1.627, -2.975]} scale={[0.506, 0.288, 0.007]}>
        <mesh
          geometry={nodes.Cube006.geometry}
          material={materials["monitor.001"]}
        />
        <mesh
          geometry={nodes.Cube006_1.geometry}
          material={nodes.Cube006_1.material}
        />
      </group>
      <group
        position={[-2.357, 1.627, -2.539]}
        rotation={[0, 0.802, 0]}
        scale={[0.506, 0.288, 0.007]}
      >
        <mesh
          geometry={nodes.Cube002.geometry}
          material={materials["monitor.001"]}
        />
        <mesh
          geometry={nodes.Cube002_1.geometry}
          material={nodes.Cube002_1.material}
        />
      </group>
      <mesh
        geometry={nodes.monitor_stand.geometry}
        material={materials.monitor}
        position={[-1.261, 1.217, -2.914]}
        scale={[0.437, 0.017, 0.152]}
      />
    </group>
  );
}

useGLTF.preload("/room/Monitor.glb");
